# for local run --  $ act -j build -P ubuntu-latest=nektos/act-environments-ubuntu:18.04
# This workflow contains jobs for downloading player data
name: Player Data Downloader
on:
  workflow_dispatch:
    inputs:
      first_id:
        description: 'First Player ID'
        required: false
        default: 30000
      last_id:
        description: 'Last Player ID'
        required: false
        default: 30100
      threads:
        description: 'Number of Execution Threads'
        required: false
        default: 10
      bucket: 
        description: 'Amazon S3 bucket name'
        required: false 
        default: dievri-kgparser

jobs:
  download:
    name: Download Player Data
    runs-on: ubuntu-latest
    env: 
      KGSTATS_JAR_FILE_PATH: kgstatsSrv/target/kgstats-srv-1.0.jar
      KGSTATS_SRV_SQL_DIR: kgstatsSrv/src/main/resources/sql
      SPRING_CONFIG_LOCATION: kgstatsSrv/src/main/resources/application.actions.properties
      INPUT_CONFIG_FILE_NAME: config.json
      OUTPUT_CONFIG_FILE_NAME: config-output.json
      STATIC_DIR: stats/
      KGSTATS_WEB_ROOT_DIR: kgstatsWeb/src/main/webapp
      BUCKET: ${{ github.event.inputs.bucket }}
    steps:
      # install jq (for generations config.json)
      - run: sudo apt-get update && sudo apt-get install -y jq
      # Clone repository with all branches and tags into github virtual machine
      - uses: actions/checkout@v2

      # Download and Install specific JDK version
      - name: Set up JDK 1.11
        uses: actions/setup-java@v1
        with:
          java-version: 1.11
         # for act caching download https://static.azul.com/zulu/bin/zulu11.43.21-ca-jdk11.0.9-linux_x64.tar.gz
         # to root workdir an uncomment
         # jdkFile: zulu11.43.21-ca-jdk11.0.9-linux_x64.tar.gz

      # Load packages from cache if present
      - name: Cache Maven packages
        uses: actions/cache@v2
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      # Build project, run tests and send to SonarCloud for analysis
      - name: Install KG Parser
        run: mvn install -Dmaven.javadoc.skip -Dmaven.test.skip=true
      
      # Generate config file using values provided from manual dispatch
      - name: Generate Config File 
        run: |
          jq -n --arg jsonFilesRootDir "json"                                 \
            --arg threadsCount  "${{ github.event.inputs.threads }}"          \
            --arg minPlayerId  "${{ github.event.inputs.first_id }}"          \
            --arg maxPlayerId  "${{ github.event.inputs.last_id }}"           \
            --arg statisticsPagesRootDir "stats"                              \
            '{ "jsonFilesRootDir": $jsonFilesRootDir, "threadsCount": $threadsCount, "minPlayerId": $minPlayerId, "maxPlayerId": $maxPlayerId, "statisticsPagesRootDir": $statisticsPagesRootDir }' > $GITHUB_WORKSPACE/$INPUT_CONFIG_FILE_NAME
     
      # Set start time to variable
      - run: echo "::set-output name=start::$(date)"
        id: start_time

        # Download player data into "jsonFilesRootDir" from $INPUT_CONFIG_FILE_NAME
      - name: Download Player Data 
        run: java -Dlog4j.configurationFile=log4j2.xml -jar $KGSTATS_JAR_FILE_PATH DOWNLOAD_PLAYER_DATA $GITHUB_WORKSPACE/$INPUT_CONFIG_FILE_NAME $GITHUB_WORKSPACE/$OUTPUT_CONFIG_FILE_NAME

      # Set end time to variable
      - run: echo "::set-output name=end::$(date)"
        id: end_time

      # Send message to the telegram group with start and end time of downloading json data 
      - name: Telegram Message Notify
        uses: appleboy/telegram-action@v0.1.0
        with:
          format: html
          to: ${{ secrets.TGBOT_CHAT }}
          token: ${{ secrets.TGBOT_TOKEN }}
          message: |
            <strong>GitHub Player Data Downloader (Manual Dispatch)</strong>
            <pre><code>
              Input Data:
                    First Player ID:  ${{ github.event.inputs.first_id }}
                     Last Player ID:  ${{ github.event.inputs.last_id }}
                  Execution Threads:  ${{ github.event.inputs.threads }}
              Time:
               Start: ${{steps.start_time.outputs.start}}
                 End: ${{steps.end_time.outputs.end}}
            </code></pre>

      # Archive all downloaded .json files
      - name: Archive Data
        run: tar cvzf "$(ls json).tar.gz" json/*

      # Configure AWS CLI with credentials from repository secrets
      - name: Configure AWS credentials from Test account
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1

      # Upload Archived Data into Bucket
      - name: Copy Archived Data to S3
        run: aws s3 cp "$(ls json).tar.gz" s3://${BUCKET}

      # Create mysql database to which json data will be parsed 
      - name: Prepare MySQL database
        run: |
              sudo systemctl start mysql
              sudo mysql -uroot -proot -e "create database actions;"

      - name: Parse json files and import data to the database
        run: |
            java -Dfile.encoding=UTF8                         \
            -Dlog4j.configurationFile=$LOG4J_XML_FILE_PATH    \
            -Dspring.profiles.active=database                 \
            -Dspring.config.location=$SPRING_CONFIG_LOCATION  \
            -jar $KGSTATS_JAR_FILE_PATH                       \
            IMPORT_JSON_TO_DATABASE                           \
            $GITHUB_WORKSPACE/$OUTPUT_CONFIG_FILE_NAME
      
      - name: Add indexes to Database 
        run: sudo mysql -uroot -proot actions < $KGSTATS_SRV_SQL_DIR/add-indexes.sql 
      
      - name: Create Database Dump
        run: sudo mysqldump -uroot -proot actions > "$(ls json).sql"

      - name: Upload DB Dump to s3
        run: aws s3 cp "$(ls json).sql" s3://${BUCKET}
     
      # Send message into telegram that json files were parsed and DB dump was saved to S3
      - name: Telegram Message Notify
        uses: appleboy/telegram-action@v0.1.0
        with:
          format: html
          to: ${{ secrets.TGBOT_CHAT }}
          token: ${{ secrets.TGBOT_TOKEN }}
          message: |
            <strong>GitHub Player Data Downloader (Manual Dispatch)</strong>
            <pre><code>
              archive with json files and database dump uploaded to s3://${{ github.event.inputs.bucket }}
            </code></pre>

      - name: create directories 
        run: |
          mkdir $STATIC_DIR
          mkdir $STATIC_DIR/js
          mkdir $STATIC_DIR/xlsx

      - name: generate static files 
        run: | 
          java -Dfile.encoding=UTF8                                 \
          -Dlog4j.configurationFile=$LOG4J_XML_FILE_PATH            \
          -Dspring.profiles.active=database                         \
          -Dspring.config.location=$SPRING_CONFIG_LOCATION          \
          -jar $KGSTATS_JAR_FILE_PATH                               \
          GENERATE_STATISTICS_FROM_DATABASE                         \
          $GITHUB_WORKSPACE/$OUTPUT_CONFIG_FILE_NAME
  
      - name: copy static files from sources 
        run: |
          cp -R $KGSTATS_WEB_ROOT_DIR/css $STATIC_DIR
          cp -R $KGSTATS_WEB_ROOT_DIR/img $STATIC_DIR
          cp $KGSTATS_WEB_ROOT_DIR/js/players-by-rank-chart.js $STATIC_DIR/js
          cp $KGSTATS_WEB_ROOT_DIR/js/stats-data.js $STATIC_DIR/js
          cp $KGSTATS_WEB_ROOT_DIR/js/stats-top-table.js $STATIC_DIR/js

      - name: Archive Static Pages
        run: tar cvzf "stats.tar.gz" stats/*
      
      - name: Copy Archived Static Pages to S3
        run: aws s3 cp "stats.tar.gz" s3://${BUCKET}

      - name: Deploy to Github Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          personal_token: ${{ secrets.PERSONAL_TOKEN }}
          external_repository: dievri/dievri.github.io
          publish_branch: master
          publish_dir: ./stats

      - name: Telegram Message Notify
        uses: appleboy/telegram-action@v0.1.0
        with:
          format: html
          to: ${{ secrets.TGBOT_CHAT }}
          token: ${{ secrets.TGBOT_TOKEN }}
          message: |
            <strong>GitHub Player Data Downloader (Manual Dispatch)</strong>
            <pre><code>
              Statistic Generation and Deployment Completed Successfully
            </code></pre>
              see https://dievri.github.io/
